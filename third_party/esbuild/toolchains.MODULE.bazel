npm_package = use_repo_rule("//third_party/esbuild:npm_package.bzl", "npm_package")

_BUILD = """
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")

native_binary(
    name = "{repo}",
    src = "{exe}",
    visibility = ["//visibility:public"],
)
"""

npm_package(
    name = "esbuild_linux_x64",
    package = "node_modules/@esbuild/linux-x64",
    strip_prefix = "package/bin",
    build_file_content = _BUILD.format(repo = "esbuild_linux_x64", exe = "esbuild"),
)

npm_package(
    name = "esbuild_linux_arm64",
    package = "node_modules/@esbuild/linux-arm64",
    strip_prefix = "package/bin",
    build_file_content = _BUILD.format(repo = "esbuild_linux_arm64", exe = "esbuild"),
)

npm_package(
    name = "esbuild_darwin_arm64",
    package = "node_modules/@esbuild/darwin-arm64",
    strip_prefix = "package/bin",
    build_file_content = _BUILD.format(repo = "esbuild_darwin_arm64", exe = "esbuild"),
)

npm_package(
    name = "esbuild_win32_x64",
    package = "node_modules/@esbuild/win32-x64",
    strip_prefix = "package",
    build_file_content = _BUILD.format(repo = "esbuild_win32_x64", exe = "esbuild.exe"),
)

register_toolchains("//third_party/esbuild:all")

resolved = use_repo_rule("@toolchain_utils//toolchain/resolved:defs.bzl", "toolchain_resolved")

resolved(
    name = "resolved-esbuild",
    toolchain_type = "//third_party/esbuild:toolchain_type",
)

# More elsewhere
_SWIPL_BUILD = """
filegroup(
    name = "swipl-web",
    srcs = glob(["swipl-web.*"]) + ["swipl-bundle.js"],
    visibility = ["//visibility:public"],
)
"""

npm_package(
    name = "swipl_wasm",
    package = "node_modules/swipl-wasm",
    strip_prefix = "package/dist/swipl",
    build_file_content = _SWIPL_BUILD,
)
