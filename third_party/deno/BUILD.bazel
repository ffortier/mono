load("@rules_python//python:py_binary.bzl", "py_binary")
load("@rules_shell//shell:sh_binary.bzl", "sh_binary")
load("@toolchain_utils//toolchain/info:defs.bzl", "toolchain_info")
load("@toolchain_utils//toolchain/test:defs.bzl", "toolchain_test")
load(":deno_binary.bzl", "deno_binary")

toolchain_type(
    name = "toolchain_type",
    visibility = ["//visibility:public"],
)

supported_platforms = [
    ("deno_linux_x86_64", "linux", "x86_64"),
    ("deno_linux_aarch64", "linux", "aarch64"),
    ("deno_darwin_aarch64", "macos", "aarch64"),
    ("deno_windows_x86_64", "windows", "x86_64"),
]

[
    [
        toolchain_info(
            name = target,
            target = "@" + target,
            variable = "DENO",
        ),
        toolchain(
            name = target + "_toolchain",
            exec_compatible_with = [
                "@platforms//cpu:" + cpu,
                "@platforms//os:" + os,
            ],
            toolchain = ":" + target,
            toolchain_type = ":toolchain_type",
        ),
    ]
    for target, os, cpu in supported_platforms
]

alias(
    name = "resolved",
    actual = "@resolved-deno",
    visibility = ["//visibility:public"],
)

toolchain_test(
    name = "test",
    args = ["--version"],
    tags = ["windows"],
    toolchains = [":resolved"],
)

sh_binary(
    name = "update-deps",
    srcs = ["update-deps.sh"],
    data = [":resolved"],
    env = {"DENO": "$(rootpath :resolved)"},
)

py_binary(
    name = "update-toolchains",
    srcs = ["update-toolchains.py"],
    data = ["//third_party/buildtools:buildifier_resolved"],
    env = {
        "BUILDIFIER": "$(rootpath //third_party/buildtools:buildifier_resolved)",
    },
    tags = ["manual"],
)

deno_binary(
    name = "bundler",
)
